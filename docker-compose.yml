version: '3.8'

services:
  # ChromaDB - Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: codeai-chromadb
    ports:
      - "8000:8000"
    environment:
      - ALLOW_RESET=TRUE
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMA_SERVER_AUTH_PROVIDER=${CHROMA_AUTH_PROVIDER:-}
      - CHROMA_SERVER_AUTH_TOKEN=${CHROMA_AUTH_TOKEN:-}
    volumes:
      - chroma-data:/chroma/chroma
    networks:
      - codeai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: codeai-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - codeai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # PostgreSQL - Metadata Storage
  postgres:
    image: postgres:16-alpine
    container_name: codeai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-codeai}
      - POSTGRES_USER=${POSTGRES_USER:-codeai}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-codeai_password}
      - POSTGRES_MAX_CONNECTIONS=100
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - codeai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-codeai}"]
      interval: 30s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # MinIO - S3 Compatible Storage
  minio:
    image: minio/minio:latest
    container_name: codeai-minio
    ports:
      - "9000:9000"   # API Port
      - "9001:9001"   # Console Port
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_DEFAULT_BUCKETS=${MINIO_BUCKET:-codeai-storage}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - codeai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Nginx - Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: codeai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - codeai-network
    depends_on:
      - chromadb
      - redis
      - postgres
      - minio
    restart: unless-stopped

  # pgAdmin - PostgreSQL Web UI (Optional, for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: codeai-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@codeai.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - codeai-network
    depends_on:
      - postgres
    profiles:
      - dev
    restart: unless-stopped

  # Redis Commander - Redis Web UI (Optional, for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: codeai-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis:redis:6379
    networks:
      - codeai-network
    depends_on:
      - redis
    profiles:
      - dev
    restart: unless-stopped

networks:
  codeai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  chroma-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local
  pgadmin-data:
    driver: local