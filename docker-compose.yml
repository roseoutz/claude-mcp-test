version: '3.8'

services:
  # ChromaDB - Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: mcp-chromadb
    ports:
      - "8000:8000"  # 외부 접근 가능
    environment:
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthServerProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=AUTHORIZATION
      - CHROMA_SERVER_AUTH_TOKEN=${CHROMA_AUTH_TOKEN:-test-token-change-in-production}
      - ANONYMIZED_TELEMETRY=false
      - ALLOW_RESET=true
      - IS_PERSISTENT=true
    volumes:
      - chroma-data:/chroma/chroma
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"  # 외부 접근 가능
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123!@#} --appendonly yes
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Redis Commander - Redis Web UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mcp-redis-commander
    ports:
      - "8081:8081"  # 외부 접근 가능
    environment:
      - REDIS_HOSTS=redis:redis:6379:0:${REDIS_PASSWORD:-redis123!@#}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin123!@#}
    networks:
      - mcp-network
    depends_on:
      - redis
    restart: unless-stopped

  # PostgreSQL - 메타데이터 저장용 (선택적)
  postgres:
    image: postgres:16-alpine
    container_name: mcp-postgres
    ports:
      - "5432:5432"  # 외부 접근 가능
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mcp_db}
      - POSTGRES_USER=${POSTGRES_USER:-mcp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123!@#}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user}"]
      interval: 30s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # pgAdmin - PostgreSQL Web UI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mcp-pgadmin
    ports:
      - "5050:80"  # 외부 접근 가능
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@mcp.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-pgadmin123!@#}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - mcp-network
    depends_on:
      - postgres
    restart: unless-stopped

  # MinIO - S3 Compatible Storage (코드 파일 저장용)
  minio:
    image: minio/minio:latest
    container_name: mcp-minio
    ports:
      - "9000:9000"   # API 포트 - 외부 접근 가능
      - "9001:9001"   # Console 포트 - 외부 접근 가능
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minio123!@#}
      - MINIO_DEFAULT_BUCKETS=mcp-codebase:public,mcp-vectors:private,mcp-cache:private
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Nginx - Reverse Proxy (보안 및 라우팅)
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "80:80"      # HTTP - 외부 접근 가능
      - "443:443"    # HTTPS - 외부 접근 가능
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/certs:/etc/nginx/certs:ro
      - nginx-logs:/var/log/nginx
    networks:
      - mcp-network
    depends_on:
      - chromadb
      - redis
      - postgres
    restart: unless-stopped

  # MCP Application (개발 모드)
  # mcp-app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   container_name: mcp-app
  #   ports:
  #     - "8080:8080"  # Spring Boot 포트
  #     - "5005:5005"  # 디버그 포트
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - CHROMA_URL=http://chromadb:8000
  #     - CHROMA_AUTH_TOKEN=${CHROMA_AUTH_TOKEN:-test-token-change-in-production}
  #     - REDIS_HOST=redis
  #     - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123!@#}
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_DB=${POSTGRES_DB:-mcp_db}
  #     - POSTGRES_USER=${POSTGRES_USER:-mcp_user}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123!@#}
  #   volumes:
  #     - ./:/app
  #     - gradle-cache:/root/.gradle
  #   networks:
  #     - mcp-network
  #   depends_on:
  #     - chromadb
  #     - redis
  #     - postgres
  #   stdin_open: true
  #   tty: true
  #   restart: unless-stopped

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  chroma-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local
  minio-data:
    driver: local
  nginx-logs:
    driver: local
  gradle-cache:
    driver: local