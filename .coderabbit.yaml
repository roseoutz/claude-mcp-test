# CodeRabbit Configuration - 순서 강제화 설정
language: ko

# 🚨 중요: AI 분석 완료 후에만 리뷰 시작
reviews:
  # AI 분석이 완료될 때까지 대기
  auto_review:
    enabled: true
    # AI 분석 완료 라벨이 있을 때만 리뷰 시작
    trigger_labels:
      - "ready-for-coderabbit"
    # AI 분석 진행 중일 때는 리뷰 안 함
    exclude_labels:
      - "ai-analysis-in-progress"

  request_changes_workflow: true
  high_level_summary: true
  poem: false
  review_status: true
  collapse_walkthrough: false

  profile: "assertive"

  # 🎯 핵심: AI 분석 결과를 반드시 참조하도록 설정
  custom_instructions: |
    ⚠️ 중요: 리뷰를 시작하기 전에 반드시 다음 순서를 따르세요:
    
    ## 1단계: AI 분석 결과 읽기 (필수)
    PR 본문에서 "🤖 AI 분석 결과" 섹션을 찾아서 **전체 내용을 정독**하세요.
    이 섹션이 없다면 리뷰를 진행하지 말고 대기하세요.
    
    ## 2단계: AI가 제시한 중점 사항 확인
    AI 분석에서 다음 항목들을 확인하세요:
    
    ### 🎯 리뷰 중점 사항
    - AI가 제시한 각 체크리스트 항목을 실제 코드에서 확인
    - 체크리스트의 각 항목에 대해 구체적인 검증 수행
    - 해당 파일과 라인을 직접 확인하여 문제 여부 판단
    
    ### ⚠️ 잠재적 위험 요소
    - AI가 감지한 각 위험 요소가 실제로 존재하는지 검증
    - 위험도가 높은 순서대로 우선 검토
    - 각 위험 요소에 대한 구체적인 해결 방법 제시
    
    ### 📦 영향받는 모듈/기능
    - 해당 모듈들과의 연관성 및 호환성 확인
    - 연쇄적인 영향 가능성 검토
    
    ### 💡 추가 제안사항
    - AI의 제안에 대한 타당성 검토
    - 더 나은 대안이 있다면 제시
    
    ## 3단계: AI 분석을 기반으로 한 상세 리뷰
    
    ### A. AI가 지적한 부분 검증
    - 각 지적 사항이 실제 코드에서 어떻게 나타나는지 확인
    - Line number와 함께 구체적인 코드 인용
    - 수정 전/후 코드 예시 제공
    
    ### B. AI가 놓친 부분 추가
    - AI 분석에서 다루지 않은 추가 이슈 발견
    - Best practice 위반 사항
    - 성능 최적화 기회
    - 테스트 커버리지 개선 사항
    
    ### C. 구체적인 해결 방법 제시
    단순히 문제만 지적하지 말고:
    - 구체적인 코드 수정 예시 제공
    - 왜 그렇게 수정해야 하는지 설명
    - 참고할 수 있는 문서나 Best practice 링크
    
    ## 4단계: 리뷰 코멘트 작성 형식
    
    각 코멘트는 다음 형식을 따르세요:
    
    ```markdown
    ## 🔴/🟡/🟢 [심각도]: [문제 요약]
    
    **AI 분석 참조**: AI가 지적한 "[구체적인 항목]"을 검증했습니다.
    
    **문제점**:
    [구체적인 문제 설명]
    
    **현재 코드**:
    ```언어
    [문제가 있는 코드]
    ```
    
    **제안 수정**:
    ```언어
    [수정된 코드]
    ```
    
    **이유**:
    [왜 이렇게 수정해야 하는지]
    
    **참고**:
    [관련 문서 링크]
    ```
    
    ## 5단계: 우선순위
    
    다음 순서로 리뷰하세요:
    1. 🔴 Critical - 보안, 데이터 손실 위험
    2. 🟠 High - 성능, Breaking Change
    3. 🟡 Medium - 코드 품질, 유지보수성
    4. 🟢 Low - 스타일, 사소한 개선
    
    ## ⚠️ 주의사항
    
    - AI 분석 결과를 단순히 반복하지 마세요
    - AI가 제시한 내용을 **검증**하고 **확장**하세요
    - 구체적인 코드 예시 없이 추상적인 조언만 하지 마세요
    - 긍정적인 부분도 언급하여 균형잡힌 리뷰를 제공하세요

  # 파일별 특별 지침
  path_instructions:
    - path: "src/auth/**"
      instructions: |
        인증 관련 코드는 보안이 최우선입니다.
        AI 분석의 보안 관련 지적 사항을 특히 집중 검토하세요.
        - JWT 토큰 처리
        - 비밀번호 해싱
        - 세션 관리
        - 권한 검증

    - path: "src/api/**"
      instructions: |
        API 변경사항은 하위 호환성이 중요합니다.
        AI 분석의 호환성 관련 항목을 우선 검토하세요.
        - Breaking Change 여부
        - API 버전 관리
        - 응답 형식 일관성

    - path: "src/payment/**"
      instructions: |
        결제 로직은 데이터 정합성이 핵심입니다.
        AI 분석의 비즈니스 로직 관련 지적사항을 꼼꼼히 검토하세요.
        - 트랜잭션 처리
        - 금액 계산 정확성
        - 환불 로직

    - path: "**/*.sql"
      instructions: |
        데이터베이스 변경은 신중해야 합니다.
        AI 분석의 데이터 정합성 항목을 중점 검토하세요.
        - 마이그레이션 롤백 가능 여부
        - 인덱스 추가 필요성
        - 성능 영향도

    - path: "**/test/**"
      instructions: |
        테스트 코드도 품질이 중요합니다.
        - 테스트 커버리지
        - Edge case 처리
        - 테스트 독립성

# 리뷰 제외 경로
path_filters:
  - "!**/node_modules/**"
  - "!**/dist/**"
  - "!**/build/**"
  - "!**/.next/**"
  - "!**/coverage/**"
  - "!**/*.min.js"
  - "!**/*.lock"
  - "!**/package-lock.json"
  - "!**/yarn.lock"

# 중요 파일 강조
important_files:
  - "src/auth/**"
  - "src/payment/**"
  - "src/api/**"
  - "**/*.sql"
  - "**/schema.prisma"
  - "**/migrations/**"

# 리뷰 톤 설정
tone_instructions: |
  건설적이고 교육적인 톤을 유지하세요.
  
  ✅ Good:
  - "이 부분은 X 문제가 있을 수 있습니다. Y 방식으로 개선하면 어떨까요?"
  - "좋은 접근입니다! 다만 Z를 추가하면 더 안전할 것 같습니다."
  
  ❌ Bad:
  - "이건 틀렸습니다."
  - "왜 이렇게 했나요?"
  
  AI가 지적한 부분을 검증했다면 명확히 언급하세요:
  - "AI 분석에서 지적된 SQL Injection 위험을 확인했습니다..."

# 자동 리뷰 설정
auto_review:
  enabled: true
  drafts: false  # Draft PR은 리뷰하지 않음
  base_branches:
    - main
    - master
    - develop